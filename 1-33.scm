(define (filtered-accumulate filter combiner null-value term a next b)
  (define (iter a result)
	(cond ((> a b) result)
		  ((filter a) (iter (next a) 
							(combiner (term a) result)))
		  (else (iter (next a)
					  result))))
  (iter a null-value))

(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
		((divides? test-divisor n) test-divisor)
		(else (find-divisor n (+ test-divisor 1)))))
(define (divides? a b) 
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))

(define (gcd x y)
  (if (= y 0)
	  x
	  (gcd y (remainder x y))))

(define (inc x) (+ x 1))
(define (sum-prime a b)
  (define (plus x y) (+ x y))
  (define (identity x) x)
  (filtered-accumulate prime? plus 0 identity a inc b ))
(define (product-coprime n)
  (define (coprime? a) (= (gcd a n) 1))
  (define (identity x) x)
  (define (times x y) (* x y))
  (filtered-accumulate coprime? times 1 identity 1 inc n))
