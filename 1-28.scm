(define (expmod base exp m)
  (define (even? n)
	(= (remainder n 2) 0))
  (cond ((= exp 0) 1)
		((even? exp)
		 ;......form technology
		 ;(and (not (= (remainder (expmod base (/ exp 2) m) m) 1))
		 ;(and (not (remainder (- (expmod base (/ exp 2) m) 1) m))
		 (and (not (remainder (- (expmod base (/ exp 2) m) 1) m))
			  (remainder (square (expmod base (/ exp 2) m )) 
						 m)))
		(else
		 (remainder (* (expmod base (- exp 1) m) base) 
					m))))
(define (fermat n a)
  (cond ((> a (+ 2 (/ n 2)) true))
		((= (expmod a (- n 1) n) 1)
		 (fermat n (+ a 1)))
		(else false)))
(define (miller-rabin n)
  (fermat n 2))
