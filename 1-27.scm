(define (expmod base exp m)
  (define (even? n)
	(= (remainder n 2) 0))
  (cond ((= exp 0) 1)
		((even? exp)
		 (remainder (square (expmod base (/ exp 2) m )) 
					m))
		(else
		 (remainder (* (expmod base (- exp 1) m) base) 
					m))))
(define (fermat n a)
  (cond ((= a n) true)
		((= (expmod a n n) a)
		 (fermat n (+ a 1)))
		(else false)))
(define (carmichael n)
  (fermat n 2))
