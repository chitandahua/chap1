(define (smallest-divisor n)
  (find-divisor n 2))
(define (find-divisor n test-divisor)
  (define (next test-divisor)
	(if (= n 2)
		3
		(+ test-divisor 2)))
  (cond ((> (square test-divisor) n) n)
		((divides? test-divisor n) test-divisor)
		(else (find-divisor n (next test-divisor)))))
(define (divides? a b) 
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (search-prime n m)
  (newline)
  (display n)
  (define (next n)
	;......
	(cond ((= n 2) 3)
		  ((= (remainder n 2) 0) (+ n 1))
		  (else n)))
  (start-prime-test (next n) (runtime) m))
(define (start-prime-test n start-time m)
  (cond ((= m 0) true)
		((prime? n)
		 (report-prime (- (runtime) start-time))
	     (newline)
	     (display (+ n 2))
		 (start-prime-test (+ n 2) (runtime) (- m 1)))
		(else 
	     (newline)
	     (display (+ n 2))
		 (start-prime-test (+ n 2) (runtime) m))))
(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))
